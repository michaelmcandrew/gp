<?php

// /*
//  * Copyright (C) 2011 Peter McAndrew and Michael McAndrew
//  * Licensed to CiviCRM under the Academic Free License version 3.0.
//  *
//  */
$gpew_membership_multiple_membership = NULL;


function gpew_membership_menu() {

	$items['membership/form'] = array(
	    'title' => "Membership sign-up | Green Party members' website",
	    'page callback' => 'gp_membership_form_redirect',
		'access callback' => TRUE,
	    'type' => MENU_CALLBACK,
	);
	return $items;
}

function gpew_membership_theme() {
  return array(
        'gpew_membership_page' => array(
                            'template' => 'gpew-membership-page',
                            'arguments' => array('membership' => NULL,
                                          'relationship' => NULL,
                                          'renew_link' => NULL,
                                          'is_primary' => NULL,
                                          'is_joint' => NULL,
                                          'membership_payment_frequency' => NULL,
                                          'membership_payment_is_recurring' => NULL,
                                          'membership_status_name' => NULL,
                                          'membership_status_id' => NULL,
                                          'more_info' => NULL
                                          ),
                            
      ));
}

function gpew_membership_block($op = 'list', $delta = '', $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      $blocks['0'] = array(
        'info' => t('Membership status block'), 
      );
      return $blocks;
    case 'view':
      switch ($delta) {
        case '0':
          $block['subject'] = t('My membership');
          $block['content'] = gpew_membership_block_contents();
          break;
      }
      return $block;
  }
}
function gpew_membership_block_contents() {
  $membership = gpew_membership_get_membership();
  $is_joint = gpew_membership_is_joint();
  $relationship = gpew_membership_get_relationship();
  $renew_link = gpew_membership_renew_link();
  $is_primary = gpew_membership_is_primary();
  $more_info = "<a href='/membership-info'>More information about membership types</a>";
  $membership_payment_frequency = $membership['custom_63'];
  $membership_payment_is_recurring = $membership['custom_54'];
  $membership_status_id = $membership['status_id'];
  include 'CRM/Member/PseudoConstant.php';

  $membership_status_name = CRM_Member_PseudoConstant::membershipStatus($membership_status_id);
  //format the date nicely
  if($membership['start_date']){
    $start_date= new DateTime($membership['start_date']);
    $membership['start_date']=$start_date->format('d/m/Y');
  }
  if($membership['end_date']){
    $end_date = new DateTime($membership['end_date']);
    $membership['end_date']=$end_date->format('d/m/Y');
    //make a new date object (with default date of now) to compare against the end date
    if($end_date > new DateTime()){
      $membership['end_date_text'] = 'ends on';
    }else{
      $membership['end_date_text'] = 'ended on';
    }
  }
  //íf there are multiple memberships
  if ($GLOBALS['gpew_membership_multiple_membership'])
  {	
    return "You have more than one membership on record so we cannot display any information here, please contact the Green Party office</br>".$more_info; 
  }
  //íf there is no membership
  if (!$membership)
  {	
    return "You have no membership on record, please <a href='/membership/form'>click here to join</a>.  </br>If you think this is an error please contact the Green Party office</br>".$more_info; 
  }

  return theme('gpew_membership_page', $membership, $relationship, $renew_link, $is_primary, $is_joint, $membership_payment_frequency, $membership_payment_is_recurring, $membership_status_name,
$membership_status_id, $more_info);
}

function gpew_membership_get_membership() {
	civicrm_initialize();
	$params = array( 
		'contact_id' => gpew_membership_getCiviId(),
		'version' => 3 );
	$results=civicrm_api("Membership","get", $params);
	if ($results['count'] >1) {$GLOBALS['gpew_membership_multiple_membership'] = TRUE;}
	$array_id = $results['id'];
	$membership=$results['values'][$array_id];
	//print_r($membership['membership_name']);exit;
	return $membership;
}

function gpew_membership_getCiviId()
{
  civicrm_initialize();
  $params = array ('version' =>'3',
    'uf_id' => gpew_membership_getDrupalId(),
    'return' => 'contact_id' );
  $results=civicrm_api("UFMatch","getvalue",$params );
  return $results;
  //return "20206";
}
function gpew_membership_getDrupalId()
{
  global $user;
  return $user->uid;
}
function gpew_membership_get_relationship()
{
  civicrm_initialize();
  $params = array( 
    'contact_id' => gpew_membership_getCiviId(),
    'return' => 'relation',
    'version' => 3,
    );
  $results=civicrm_api("Relationship","getvalue", $params);
  //print_r($results);exit;
  return $results;
}
function gpew_membership_is_joint()
{
  $membership = gpew_membership_get_membership();
  $membership_name = $membership['membership_name'];	
  if (strpos($membership_name,"Joint")!== false) 
  {
    return '7';//true
  }
  else {
    return '6';//false
  }
}
function gpew_membership_is_primary()
{
  if (gpew_membership_get_relationship()=='receives membership from')
  {
    return FALSE;
  }
  else 
  {
    return TRUE;
  }
}

function gpew_membership_renew_link()
{
  //this function is a little redundant since we're not redirecting people to different contribution pages (joint or individual).  I'm leaving it here incase we need to distinguish at a later point.  
  $link = 'http://renew.greenparty.org.uk';
  //$link = '/civicrm/contribute/transact?reset=1&id='.gpew_membership_is_joint();
  return $link;
}

function gpew_membership_civicrm_buildForm($formName, &$form) {
	global $user;

 	$jointMemberFields=array('JointMemberFirstName', 'JointMemberMiddleName', 'JointMemberLastName', 'JointMemberEmailAddress', 'JointMemberEmailAddress', 'JointMemberMobile', 'JointMemberDateOfBirth');

	// Donation forms : confirmation page
	if ($formName == 'CRM_Contribute_Form_Contribution_Confirm' OR $formName == 'CRM_Contribute_Form_Contribution_ThankYou') {
		if(in_array($form->_params['selectMembership'], array(10,12,16))){
			$form->assign('isJointMembership', TRUE);
		};
		foreach($jointMemberFields as $f){
			if (isset($form->_params[$f])) {
				$jointMemberDetails[$f]=$form->_params[$f];
			}
		}
	}
	
	if ($formName == 'CRM_Contribute_Form_Contribution_ThankYou' and $form->get('membership_id')) {
		$form->get('membership_id');
		require_once('CRM/Member/BAO/Membership.php');
		require_once('CRM/Core/Action.php');
		$membership_object = new CRM_Member_BAO_Membership;
		$membership_object->id = $form->get('membership_id');
		$membership_object_params=array();
		CRM_Member_BAO_Membership::createRelatedMemberships($membership_object_params, $membership_object);
	}	
	$form->assign('jointMember', $jointMemberDetails);
	
	if(!($formName == 'CRM_Contribute_Form_Contribution_Main' && $form->_id == 6)){
		return;
	}

	if($user->uid){
		civicrm_initialize();
		$params = array ('version' =>'3',
						'uf_id' => $user->uid,
						'return' => 'contact_id' );
		$civiId=civicrm_api("UFMatch","getvalue",$params );

		$params[1] = array( $civiId, 'Integer');
		$query="SELECT
			cc.id,
			cc.first_name,
			cc.middle_name,
			cc.last_name,
			cc.birth_date,
			ce.email,
			ce.id AS email_id,
			cp.phone,
			cp.id AS phone_id
		FROM civicrm_contact AS cc
		JOIN civicrm_relationship AS cr ON cc.id = cr.contact_id_a
		LEFT JOIN civicrm_email AS ce ON cc.id=ce.contact_id AND ce.is_primary
		LEFT JOIN civicrm_phone AS cp ON cc.id=cp.contact_id AND cp.is_primary
		WHERE
			cr.contact_id_b = %1 AND
			cr.relationship_type_id = 22 AND
			cr.is_active = 1 AND
			cc.is_deleted = 0";
		
		$result = CRM_Core_DAO::executeQuery( $query, $params );	
		$result->fetch();
		
		$birthDate = $result->birth_date;
		if ($birthDate){
			$birthDate = date("m/d/Y", strtotime($birthDate));
		}
	}
	
	$form->addElement('text', 'JointMemberFirstName', ts('First Name'), array('value'=>$result->first_name) );
	$form->addElement('text', 'JointMemberMiddleName', ts('Middle Name'), array('value'=>$result->middle_name) );
	$form->addElement('text', 'JointMemberLastName', ts('Last Name'), array('value'=>$result->last_name) );
	$form->addElement('text',"JointMemberEmailAddress", ts('Email'), array('value'=>$result->email), CRM_Core_DAO::getAttribute('CRM_Core_DAO_Email', 'email') );
	$form->addRule( "JointMemberEmailAddress", ts('Email is not valid.'), 'email' );
	$form->addElement('text', 'JointMemberMobile', ts('Mobile'), array('value'=>$result->phone) );
	$form->addDate('JointMemberDateOfBirth', ts('Date of birth'), false, array( 'value'=>$newDate, 'formatType' => 'birth') );
	$form->addElement('hidden', 'JointMemberId',$result->id);
	$form->addElement('hidden', 'JointMemberEmailId',$result->email_id);
	$form->addElement('hidden', 'JointMemberMobileId',$result->phone_id);


}

function gpew_membership_civicrm_validate( $formName, &$fields, &$files, &$form ) {

    if ( $formName == 'CRM_Contribute_Form_Contribution_Main' AND in_array($fields['selectMembership'], array(10,12,16))) {
       // ensure that external identifier is present and valid
       $FirstName = CRM_Utils_Array::value( 'JointMemberFirstName', $fields );
       if ( ! trim($FirstName) ) {
          $errors['JointMemberFirstName'] = ts( 'The secondary member first name is a required field for joint memberships' );
       }
       $LastName = CRM_Utils_Array::value( 'JointMemberLastName', $fields );
       if ( ! trim($LastName) ) {
          $errors['JointMemberLastName'] = ts( 'The secondary member last name is a required field for joint memberships' );
       }
    }
    return empty( $errors ) ? true : $errors;

}
function gpew_membership_civicrm_postProcess( $formName, &$form ){
		if($formName != 'CRM_Contribute_Form_Contribution_Confirm' ){
		return;
	}
		$form_params=$form->getVar('_params');
//	print_r($form_params['cms_contactID']);exit;
	if(!isset($form_params['contactID'])){
		$form_params['contactID']=$form_params['cms_contactID'];
		$form->_params['contactID']=$form->_params['cms_contactID'];
	}
	gpew_membership_process_young_green($form_params['contactID'], $form_params['birth_date']);
	
	$results=civicrm_api("Membership","getsingle", array ('version' =>'3', 'membership_id'=>$form->_values['membership_id']));
	
	// Process young green
		
	//If this is a joint membership application / renewal
	if (in_array($results['membership_type_id'], array(10,12,16))){
				
		$dob = new DateTime($form->_params['JointMemberDateOfBirth']);
		$dob_ts = $dob->format('Y-m-d');
		
		//If they already have a joint relationship that we pulled into this form...
		if($form->_params['JointMemberId']){
					//	echo 'ready to update the joint member details';exit;
			//then update the joint member details
			
			//update contact first name, last name, dob
			$contact_params=array(
				'first_name'=>$form->_params['JointMemberFirstName'],
				'middle_name'=>$form->_params['JointMemberMiddleName'],
				'last_name'=>$form->_params['JointMemberLastName'],
				'birth_date'=>$dob_ts,
				'id'=>$form->_params['JointMemberId'],
				'contact_type'=>'Individual',
				'version'=>3,
				);
			// print_r($contact_params);
			$contact_result=civicrm_api("Contact","update", $contact_params);
			// print_r($contact_result);exit;
				
			
			//update contact HOME address using primary member fileds
			
			$address_params=array(
				'contact_id'=>$form->_params['JointMemberId'],
				'street_address'=>$form->_params['street_address-Primary'],
			    'supplemental_address_1'=>$form->_params['supplemental_address_1-1'],
			    'supplemental_address_2'=>$form->_params['supplemental_address_2-1'],
			    'city'=>$form->_params['city-1'],
			    'postal_code'=>$form->_params['postal_code-1'],
				'location_type_id'=>1,
				'is_primary'=>1,
				'version'=>3,
			);
			$address_result=civicrm_api("Address","create", $address_params);
			
			//if a email address was pulled into the form (i.e. if the email_id is present)
			if($form->_params['JointMemberEmailId']){
								//if the email is present
				if(strlen(trim($form->_params['JointMemberEmailAddress']))){
					//update
					$email_params=array(
						'id'=>$form->_params['JointMemberEmailId'],
						'email'=>$form->_params['JointMemberEmailAddress'],
						'version'=>3,
						);
					$email_result=civicrm_api("Email","update", $email_params);
				}else{
					$email_params=array(
						'id'=>$form->_params['JointMemberEmailId'],
						'version'=>3,
						);
					$email_result=civicrm_api("Email","delete", $email_params);
				}
			}else{
				// no email was in the form when it was loaded
				if(strlen(trim($form->_params['JointMemberEmailAddress']))){
					$email_params=array(
						'contact_id'=>$form->_params['JointMemberId'],
						'email'=>$form->_params['JointMemberEmailAddress'],
						'is_primary'=>1,
						'version'=>3,
						);
					$email_result=civicrm_api("Email","create", $email_params);
				}
			}
			
			if($form->_params['JointMemberMobileId']){
				//if the phone is present
				if(strlen(trim($form->_params['JointMemberMobile']))){
					//update
					$phone_params=array(
						'id'=>$form->_params['JointMemberMobileId'],
						'phone'=>$form->_params['JointMemberMobile'],
						'version'=>3,
						);
					$phone_result=civicrm_api("Phone","update", $phone_params);
				}else{
					$phone_params=array(
						'id'=>$form->_params['JointMemberMobileId'],
						'version'=>3,
						);
					$phone_result=civicrm_api("Phone","delete", $phone_params);
				}
			}else{
				// no phone was in the form when it was loaded
				if(strlen(trim($form->_params['JointMemberMobile']))){
					$phone_params=array(
						'contact_id'=>$form->_params['JointMemberId'],
						'phone'=>$form->_params['JointMemberMobile'],
						'is_primary'=>1,
						'phone_type_id'=>2,
						'version'=>3,
						);
					$phone_result=civicrm_api("Phone","create", $phone_params);
				}
			}
			//we assign this here so we can do young green processing below
			$contact_result['id']=$form->_params['JointMemberId'];
		//if they don't then lets create a new contact
		}else{
			$contact_params=array(
				'first_name'=>$form->_params['JointMemberFirstName'],
				'middle_name'=>$form->_params['JointMemberMiddleName'],
				'last_name'=>$form->_params['JointMemberLastName'],
				'birth_date'=>$dob_ts,
				'contact_type'=>'Individual',
				'version'=>3,
				);
			$contact_result=civicrm_api("Contact","create", $contact_params);
			if($form->_params['JointMemberEmailAddress']){
				$email_params=array(
					'contact_id'=>$contact_result['id'],
					'email'=>$form->_params['JointMemberEmailAddress'],
					'version'=>3,
					);
				$email_result=civicrm_api("Email","create", $email_params);
			}
			if($form->_params['JointMemberMobile']){
				$phone_params=array(
					'contact_id'=>$contact_result['id'],
					'phone'=>$form->_params['JointMemberMobile'],
					'phone_type_id'=>2,
					'is_primary'=>1,
					'version'=>3,
					);
				$phone_result=civicrm_api("Phone","create", $phone_params);
			}
			
			$address_params=array(
				'contact_id'=>$contact_result['id'],
				'street_address'=>$form->_params['street_address-Primary'],
			    'supplemental_address_1'=>$form->_params['supplemental_address_1-1'],
			    'supplemental_address_2'=>$form->_params['supplemental_address_2-1'],
			    'city'=>$form->_params['city-1'],
			    'postal_code'=>$form->_params['postal_code-1'],
				'location_type_id'=>1,
				'is_primary'=>1,
				'version'=>3,
			);
			$address_result=civicrm_api("Address","create", $address_params);
			//Force postcode lookup?
			
			//Create relationship
						
			$rel_params=array(
				'contact_id_a'=>$contact_result['id'],
				'contact_id_b'=>$form->_params['contactID'],
				'relationship_type_id'=>22,
				'is_active'=>1,
				'version'=>3,
				);
			$rel_result=civicrm_api("Relationship","create", $rel_params);	
					
		}
		gpew_membership_process_young_green($contact_result['id'], $form->_params['JointMemberDateOfBirth']);
		$membership_params=array('id'=>$form_params['membershipID'], 'version'=>3);
		$form->set('membership_id', $form_params['membershipID']);
		//need to update membership to inherit jointness
// 		$mem_gs_result=civicrm_api("Membership","getsingle", $membership_params);
// //		print_r($mem_gs_result);
// 		$mem_gs_result['version']=3;
// 		$mem_gs_result['source']=$mem_gs_result['source'].' PostProcess';
// 		
// 		$mem_u_result=civicrm_api("Membership","update", $mem_gs_result);
	}	
}


function gpew_membership_process_young_green($contact_id, $date_of_birth){
	//need to handle blank DOB or CID
	if($date_of_birth=='' OR $contact_id==''){
		return;
	}
	$dob = new DateTime($date_of_birth);
	$dob_ts = $dob->getTimestamp();
	$now = new DateTime();
	$now_ts = $now->getTimestamp();
	$age=($now_ts-$dob_ts)/(60*60*24*365.25);
	if ($age > 30){
		return;
	}
	$params[1] = array( $contact_id, 'Integer');
	$query="SELECT *
	FROM civicrm_group_contact
	WHERE group_id =30
	AND contact_id =%1";
	$result = CRM_Core_DAO::executeQuery( $query, $params );
	$result->fetch();
	if ($result->N ==0){//add to young greens group 
		$params = array ('version' =>'3',
						'contact_id' => $contact_id,
						'group_id' => '30'//Young greens group
						);
		$results=civicrm_api("GroupContact","create", $params);	
	}
} 



function gp_membership_form_redirect() {
	civicrm_initialize();
	CRM_Utils_System::redirect("/civicrm/contribute/transact?reset=1&id=6");
}



?>
