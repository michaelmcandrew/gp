<?php
define('CIVIGP_CAPITATION_MEMBERSHIP_CONTRIBUTION_TYPE_ID', 2);
define('CIVIGP_CAPITATION_LOCAL_CAP_PERCENT', 0.08);
define('CIVIGP_CAPITATION_REGIONAL_CAP_PERCENT', 0.16);
define('CIVIGP_CAPITATION_LOCAL_PARTY_CUSTOM_FIELD', 'custom_34');
define('CIVIGP_CAPITATION_REGIONAL_PARTY_CUSTOM_FIELD', 'custom_36');

define('CIVIGP_CAPITATION_TABLE', 'civicrm_value_capitation_4');
define('CIVIGP_CAPITATION_NATIONAL_AMOUNT', 'national_party_5');
define('CIVIGP_CAPITATION_EXTRA_AMOUNT', 'extra_donation_8');
define('CIVIGP_CAPITATION_REGIONAL_CONTACT_ID', 'region_9');
define('CIVIGP_CAPITATION_LOCAL_CONTACT_ID', 'local_party_10');
define('CIVIGP_CAPITATION_REGIONAL_AMOUNT', 'regional_capitation_11');
define('CIVIGP_CAPITATION_LOCAL_AMOUNT', 'local_capitation_12');

function civigp_capitation_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {
	// civigp_capitation_batch_update();
	// exit;
	if($op != "edit" && $op != "create"){
		return;
	}
	if($objectName != "Contribution"){
		return;
	}
	if($objectRef->contribution_type_id!=CIVIGP_CAPITATION_MEMBERSHIP_CONTRIBUTION_TYPE_ID){
		return;
	}
	
	if(!civigp_capitation_is_current_member($objectRef->contact_id)){
		return;
	}
	
	// if we got this far, we are editing or creating a contribution of type membership_fee for a current member, therefore, we should perform the capitation
	civigp_capitation_capitate($objectRef->id);
}

//rework this function so that it takes contribution id and asks for itself (using the API) the contact id and the total amount

function civigp_capitation_capitate($contribution_id, $time_period='annual', $membership_fee='look_up'){
	
	require_once 'api/v2/Contribute.php';
	$params = array('contribution_id'=>$contribution_id);        
    $contribution = civicrm_contribution_get($params);
	$total_amount = $contribution['total_amount'];
	$contact_id = $contribution['contact_id']; 
    
	//check what membership type the member has already been set, or needs to be looked up
	if(!is_numeric($membership_fee)){
		$membership_fee=civigp_capitation_lookup_membership_fee($contact_id);
	}
	
	//account for membership fee payments covering less that a year
	$time_period_factors = array(
		'annual'=>1,
		'half-yearly'=>2,
		'monthly'=>12,
		'quarterly'=>3					
	);
	
	if(in_array($time_period, array_keys($time_period_factors))){
		$membership_fee = $membership_fee / $time_period_factors[$time_period]; 		
	}
	
	//initialise capitation array
	$capitation = array(
		'total_amount' => $total_amount,
		'membership_fee' => $membership_fee,
		'capitatable_amount' => 0,
		'extra_amount' => 0,
		'national_amount' => 0,
		'local_contact_id' => 0,
		'local_amount' => 0,
 		'regional_contact_id' => 0,
		'regional_amount' => 0
	);

	//calculate capitation amounts
	if($total_amount > $membership_fee){
		$capitation['extra_amount'] = $capitation['total_amount'] - $membership_fee;
		$capitation['capitatable_amount'] = $membership_fee;
	} else {
		$capitation['capitatable_amount'] = $capitation['total_amount'];	
	}
	$capitation['local_amount'] = round($capitation['capitatable_amount'] * CIVIGP_CAPITATION_LOCAL_CAP_PERCENT, 2);
	$capitation['regional_amount'] = round($capitation['capitatable_amount'] * CIVIGP_CAPITATION_REGIONAL_CAP_PERCENT, 2);
	$capitation['national_amount'] = $capitation['capitatable_amount'] - ($capitation['local_amount'] + $capitation['regional_amount']);
	
	//assign local and regional party
	require_once 'api/v2/Contact.php';
	$params = array(
		'contact_id' => $contact_id,
		'return_'.CIVIGP_CAPITATION_LOCAL_PARTY_CUSTOM_FIELD => 1,
		'return_'.CIVIGP_CAPITATION_REGIONAL_PARTY_CUSTOM_FIELD => 1
		);
	$result=civicrm_contact_get($params);
	$party_ids=current($result);
	
	//set this based on the contacts current local and regional party
	$capitation['local_contact_id'] = $party_ids[CIVIGP_CAPITATION_LOCAL_PARTY_CUSTOM_FIELD];
	$capitation['regional_contact_id'] = $party_ids[CIVIGP_CAPITATION_REGIONAL_PARTY_CUSTOM_FIELD];	
	
	$labelTranslation = array (
		'national_amount' => 'national_party_5',
		'extra_amount' => 'extra_donation_8',
		'regional_contact_id' => 'region_9',
		'local_contact_id' => 'local_party_10',
		'regional_amount' => 'regional_capitation_11',
		'local_amount' => 'local_capitation_12'
	);
	
	$params = array( );
	$count = 0;
	foreach($capitation as $k => $v) {
		if(in_array($k, array_keys($labelTranslation)) && strlen(trim($v))){
			$fieldsToUpdate[]="`{$labelTranslation[$k]}`= %{$count}";
			$params[$count] = array( $v, 'String');
			$count++;			
		}
	}
	$params[$count] = array( $contribution_id, 'Integer');
	$query = "REPLACE INTO `".CIVIGP_CAPITATION_TABLE."` SET `entity_id`= %{$count}, ".implode(', ',$fieldsToUpdate);
	$updateResult = CRM_Core_DAO::executeQuery( $query, $params );
}
	
function civigp_capitation_is_current_member($contact_id){
	require_once 'api/v2/Membership.php';
	$params = array( 'contact_id' => $contact_id);
  	$result = civicrm_membership_contact_get($params);
	if(!is_array(current($result))){
		// This contact has no memberships
		return FALSE;
	}
	//TODO: at the moment, this doesn't check that they are a current member - it also includes expired memebrships
	return TRUE;
}
	
function civigp_capitation_lookup_membership_fee($contact_id) {
	require_once 'api/v2/Membership.php';
	$params = array( 'contact_id' => $contact_id);
  	$result = civicrm_membership_contact_get($params);
	// just get first membership for now, i.e. don't worry about the edge case when someone will have more than one membership
	$memebership=current(current($result));
	$params = array ( 'id' => $membership['membership_type_id'] );
	$membership_type=current(civicrm_membership_types_get($params));
	return $membership_type['minimum_fee'];
}
