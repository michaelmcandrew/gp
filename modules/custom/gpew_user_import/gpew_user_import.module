<?php

function gpew_user_import_import() {
	
	// make the translation from civi contacts to drupal nodes
	$pq=db_query( "SELECT * FROM content_type_group WHERE field_civicrmid_value IS NOT NULL AND (field_group_type_value = 'Local party' OR field_group_type_value = 'Regional party')");
	while($p=db_fetch_object($pq)){
		$pt[$p->field_civicrmid_value]=$p->nid;
	}
	
	$contacts_to_create=db_query( "
		SELECT cc.id as id, uname, ce.email, local_party_id, regional_party_id FROM civicrm_contact AS cc JOIN civicrm_value_gpew_party_information AS pi ON cc.id=pi.entity_id
		JOIN civicrm_membership AS cm ON cc.id=cm.contact_id
		JOIN civicrm_membership_status AS cms ON cms.id=cm.status_id
		JOIN civicrm_email AS ce ON ce.contact_id=cc.id
		JOIN temp_import_usernames as tiu ON tiu.contact_id = cc.id
		LEFT JOIN users ON users.name=uname WHERE is_current_member AND users.name IS NULL
		GROUP BY email LIMIT 100
			" );


	// add each user
	while($data=db_fetch_object($contacts_to_create)){
		
		//start test
		// $delete_user_uid = db_result(db_query("SELECT uid FROM {users} WHERE name = 'testing_gpew_user_import'", $username));
		// user_delete(null, $delete_user_uid);
		// 
		// $pass = user_password();
		// 	    
		// $user_data = array(
		// 	'name' => 'testing_gpew_user_import',
		// 	'pass' => $pass, // note: do not md5 the password
		// 	'mail' => 'michaelmcandrew@gmail.com',
		// 	'status' => 1,
		// 	'init' => 'michaelmcandrew@gmail.com', // same as mail
		// 	'roles' => array('14'=>'member') // this is the member role
		// 	);
		// end test - comment out the above and uncomment below to do it for real
		
		$user_data = array(
			'name' => $data->uname,
			'pass' => user_password(), // note: do not md5 the password
			'mail' => $data->email,
			'status' => 1,
			'init' => $data->email, // same as mail
			'roles' => array('14'=>'member') // this is the member role
			);
		
		$time=time();
		$new_user=user_save(null, $user_data);
		if(isset($pt[$data->local_party_id]) AND strlen($data->local_party_id)) {
			db_query ( "INSERT INTO {og_uid} SET nid={$pt[$data->local_party_id]}, og_role=0, is_active=1, is_admin=0, uid={$new_user->uid}, created={$time} , changed={$time}");
		}	
		if(isset($pt[$data->regional_party_id]) AND strlen($data->local_party_id)) {
			db_query ( "INSERT INTO {og_uid} SET nid={$pt[$data->regional_party_id]}, og_role=0, is_active=1, is_admin=0, uid={$new_user->uid}, created={$time} , changed={$time}");
		}	
		echo '.';	
		//send them an email
		$new_user->password=$pass;
		//_user_mail_notify('register_admin_created', $new_user);
		
		//also needs to be commented out so the script will actually loop
	}	
}


function gpew_user_import_make_user_names() {


	//find all the contacts that you want to create drupal names for (in the test, the should be limited to 1 for safety)
	$contacts_to_create=db_query( "
		SELECT cc.id as id, first_name, last_name, ce.email, local_party_id, regional_party_id FROM civicrm_contact AS cc JOIN civicrm_value_gpew_party_information AS pi ON cc.id=pi.entity_id
		JOIN civicrm_membership AS cm ON cc.id=cm.contact_id
		JOIN civicrm_membership_status AS cms ON cms.id=cm.status_id
		JOIN civicrm_email AS ce ON ce.contact_id=cc.id
		LEFT JOIN civicrm_uf_match AS cum ON cum.contact_id=cc.id
		WHERE is_current_member AND cum.id IS NULL
		GROUP BY email
		" );

	// create unique names for them
	$names=array();
	while($contact=db_fetch_object($contacts_to_create)){
		$name=preg_replace('/[^a-z A-Z]/', ' ', $contact->first_name.' '.$contact->last_name);
		if(!in_array($name, $names)){
			$names[$contact->id]=$name;	
		} else {
			$nc[$name]++;
			$names[$contact->id]=$name.' '.$nc[$name];			

		}
		echo '.';
//		."\n";
	}
	
	foreach($names as $contact_id => $username)
		db_query( "INSERT INTO temp_import_usernames SET contact_id={$contact_id}, uname= '{$username}'\n");
}

