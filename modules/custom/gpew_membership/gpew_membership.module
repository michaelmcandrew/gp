<?php

// /*
//  * Copyright (C) 2011 Peter McAndrew and Michael McAndrew
//  * Licensed to CiviCRM under the Academic Free License version 3.0.
//  *
//  */


function gpew_membership_menu() {
	$items['renew'] = array(
		'title' => 'Membership renewal',
		'page callback' => 'gpew_renew_page',
		'access callback' => TRUE,
		'menu_name' => 'menu-tertiary-links',
	);
	$items['membership/form'] = array(
	    'title' => "Membership sign-up | Green Party members' website",
	    'page callback' => 'gp_membership_form_redirect',
		'access callback' => TRUE,
	    'type' => MENU_CALLBACK,
	);
	return $items;
}



function gpew_membership_civicrm_buildForm($formName, &$form) {
	global $user;

 	$jointMemberFields=array('JointMemberFirstName', 'JointMemberMiddleName', 'JointMemberLastName', 'JointMemberEmailAddress', 'JointMemberEmailAddress', 'JointMemberMobile', 'JointMemberDateOfBirth');

	// Donation forms : confirmation page
	if ($formName == 'CRM_Contribute_Form_Contribution_Confirm' OR $formName == 'CRM_Contribute_Form_Contribution_ThankYou') {
		if(in_array($form->_params['selectMembership'], array(10,12,16))){
			$form->assign('isJointMembership', TRUE);
		};
		foreach($jointMemberFields as $f){
			if (isset($form->_params[$f])) {
				$jointMemberDetails[$f]=$form->_params[$f];
			}
		}
	}
	$form->assign('jointMember', $jointMemberDetails);
	
	if(!($formName == 'CRM_Contribute_Form_Contribution_Main' && $form->_id == 6)){
		return;
	}

	if($user->uid){
		civicrm_initialize();
		$params = array ('version' =>'3',
						'uf_id' => $user->uid,
						'return' => 'contact_id' );
		$civiId=civicrm_api("UFMatch","getvalue",$params );

		$params[1] = array( $civiId, 'Integer');
		$query="SELECT
			cc.id,
			cc.first_name,
			cc.middle_name,
			cc.last_name,
			cc.birth_date,
			ce.email,
			ce.id AS email_id,
			cp.phone,
			cp.id AS phone_id
		FROM civicrm_contact AS cc
		JOIN civicrm_relationship AS cr ON cc.id = cr.contact_id_a
		LEFT JOIN civicrm_email AS ce ON cc.id=ce.contact_id AND ce.is_primary
		LEFT JOIN civicrm_phone AS cp ON cc.id=cp.contact_id AND cp.is_primary
		WHERE
			cr.contact_id_b = %1 AND
			cr.relationship_type_id = 22 AND
			cr.is_active = 1 AND
			cc.is_deleted = 0";
		
		$result = CRM_Core_DAO::executeQuery( $query, $params );	
		$result->fetch();
		
		$birthDate = $result->birth_date;
		if ($birthDate){
			$birthDate = date("m/d/Y", strtotime($birthDate));
		}
	}
	
	$form->addElement('text', 'JointMemberFirstName', ts('First Name'), array('value'=>$result->first_name) );
	$form->addElement('text', 'JointMemberMiddleName', ts('Middle Name'), array('value'=>$result->middle_name) );
	$form->addElement('text', 'JointMemberLastName', ts('Last Name'), array('value'=>$result->last_name) );
	$form->addElement('text',"JointMemberEmailAddress", ts('Email'), array('value'=>$result->email), CRM_Core_DAO::getAttribute('CRM_Core_DAO_Email', 'email') );
	$form->addRule( "JointMemberEmailAddress", ts('Email is not valid.'), 'email' );
	$form->addElement('text', 'JointMemberMobile', ts('Mobile'), array('value'=>$result->phone) );
	$form->addDate('JointMemberDateOfBirth', ts('Date of birth'), false, array( 'value'=>$newDate, 'formatType' => 'birth') );
	$form->addElement('hidden', 'JointMemberId',$result->id);
	$form->addElement('hidden', 'JointMemberEmailId',$result->email_id);
	$form->addElement('hidden', 'JointMemberMobileId',$result->phone_id);


}

function gpew_membership_civicrm_validate( $formName, &$fields, &$files, &$form ) {

    if ( $formName == 'CRM_Contribute_Form_Contribution_Main' AND in_array($fields['selectMembership'], array(10,12,16))) {
       // ensure that external identifier is present and valid
       $FirstName = CRM_Utils_Array::value( 'JointMemberFirstName', $fields );
       if ( ! trim($FirstName) ) {
          $errors['JointMemberFirstName'] = ts( 'The secondary member first name is a required field for joint memberships' );
       }
       $LastName = CRM_Utils_Array::value( 'JointMemberLastName', $fields );
       if ( ! trim($LastName) ) {
          $errors['JointMemberLastName'] = ts( 'The secondary member last name is a required field for joint memberships' );
       }
    }
    return empty( $errors ) ? true : $errors;

}
function gpew_membership_civicrm_postProcess( $formName, &$form ){
	if(!($formName == 'CRM_Contribute_Form_Contribution_Confirm' )){
		return;
	}
	$form_params=$form->getVar('_params');
	gpew_membership_process_young_green($form_params['contactID'], $form_params['birth_date']);
	
	$results=civicrm_api("Membership","getsingle", array ('version' =>'3', 'membership_id'=>$form->_values['membership_id']));
	
	// Process young green
		
	//If this is a joint membership application / renewal
	if (in_array($results['membership_type_id'], array(10,12,16))){
		//If they already have a joint relationship that we pulled into this form...
		if($form->_params['JointMemberId']){
		//	echo 'ready to update the joint member details';exit;
			//then update the joint member details
			
			//update contact first name, last name, dob
			$contact_params=array(
				'first_name'=>$form->_params['JointMemberFirstName'],
				'middle_name'=>$form->_params['JointMemberMiddleName'],
				'last_name'=>$form->_params['JointMemberLastName'],
				'date_of_birth'=>$form->_params['JointMemberDateOfBirth'],
				'id'=>$form->_params['JointMemberId'],
				'contact_type'=>'Individual',
				'version'=>3,
				);
			// print_r($contact_params);
			$contact_result=civicrm_api("Contact","update", $contact_params);
			// print_r($contact_result);exit;
				
			
			//update contact HOME address using primary member fileds
			
			$address_params=array(
				'contact_id'=>$form->_params['JointMemberId'],
				'street_address'=>$form->_params['street_address-Primary'],
			    'supplemental_address_1'=>$form->_params['supplemental_address_1-1'],
			    'supplemental_address_2'=>$form->_params['supplemental_address_2-1'],
			    'city'=>$form->_params['city-1'],
			    'postal_code'=>$form->_params['postal_code-1'],
				'location_type_id'=>1,
				'is_primary'=>1,
				'version'=>3,
			);
			$address_result=civicrm_api("Address","create", $address_params);
			
			//if a email address was pulled into the form (i.e. if the email_id is present)
			if($form->_params['JointMemberEmailId']){
				//if the email is present
				if(strlen(trim($form->_params['JointMemberEmailAddress']))){
					//update
					$email_params=array(
						'id'=>$form->_params['JointMemberEmailId'],
						'email'=>$form->_params['JointMemberEmailAddress'],
						'version'=>3,
						);
					$email_result=civicrm_api("Email","update", $email_params);
				}else{
					$email_params=array(
						'id'=>$form->_params['JointMemberEmailId'],
						'version'=>3,
						);
					$email_result=civicrm_api("Email","delete", $email_params);
				}
			}else{
				// no email was in the form when it was loaded
				if(strlen(trim($form->_params['JointMemberEmailAddress']))){
					$email_params=array(
						'contact_id'=>$form->_params['JointMemberId'],
						'email'=>$form->_params['JointMemberEmailAddress'],
						'is_primary'=>1,
						'version'=>3,
						);
					$email_result=civicrm_api("Email","create", $email_params);
				}
			}
			
			if($form->_params['JointMemberMobileId']){
				//if the phone is present
				if(strlen(trim($form->_params['JointMemberMobile']))){
					//update
					$phone_params=array(
						'id'=>$form->_params['JointMemberMobileId'],
						'phone'=>$form->_params['JointMemberMobile'],
						'version'=>3,
						);
					$phone_result=civicrm_api("Phone","update", $phone_params);
				}else{
					$phone_params=array(
						'id'=>$form->_params['JointMemberMobileId'],
						'version'=>3,
						);
					$phone_result=civicrm_api("Phone","delete", $phone_params);
				}
			}else{
				// no phone was in the form when it was loaded
				if(strlen(trim($form->_params['JointMemberMobile']))){
					$phone_params=array(
						'contact_id'=>$form->_params['JointMemberId'],
						'phone'=>$form->_params['JointMemberMobile'],
						'is_primary'=>1,
						'phone_type_id'=>2,
						'version'=>3,
						);
					$phone_result=civicrm_api("Phone","create", $phone_params);
				}
			}
			//we assign this here so we can do young green processing below
			$contact_result['id']=$form->_params['JointMemberId'];
		//if they don't then lets create a new contact
		}else{
			$contact_params=array(
				'first_name'=>$form->_params['JointMemberFirstName'],
				'middle_name'=>$form->_params['JointMemberMiddleName'],
				'last_name'=>$form->_params['JointMemberLastName'],
				'date_of_birth'=>$form->_params['JointMemberDateOfBirth'],
				'contact_type'=>'Individual',
				'version'=>3,
				);
			$contact_result=civicrm_api("Contact","create", $contact_params);
			if($form->_params['JointMemberEmailAddress']){
				$email_params=array(
					'contact_id'=>$contact_result['id'],
					'email'=>$form->_params['JointMemberEmailAddress'],
					'version'=>3,
					);
				$email_result=civicrm_api("Email","create", $email_params);
			}
			if($form->_params['JointMemberMobile']){
				$phone_params=array(
					'contact_id'=>$contact_result['id'],
					'phone'=>$form->_params['JointMemberMobile'],
					'phone_type_id'=>2,
					'is_primary'=>1,
					'version'=>3,
					);
				$phone_result=civicrm_api("Phone","create", $phone_params);
			}
			
			$address_params=array(
				'contact_id'=>$contact_result['id'],
				'street_address'=>$form->_params['street_address-Primary'],
			    'supplemental_address_1'=>$form->_params['supplemental_address_1-1'],
			    'supplemental_address_2'=>$form->_params['supplemental_address_2-1'],
			    'city'=>$form->_params['city-1'],
			    'postal_code'=>$form->_params['postal_code-1'],
				'location_type_id'=>1,
				'is_primary'=>1,
				'version'=>3,
			);
			$address_result=civicrm_api("Address","create", $address_params);
			//Force postcode lookup?
			
			//Create relationship
			$rel_params=array(
				'contact_id_a'=>$contact_result['id'],
				'contact_id_b'=>$form->_params['contactID'],
				'relationship_type_id'=>22,
				'is_active'=>1,
				'version'=>3,
				);
			$rel_result=civicrm_api("Relationship","create", $rel_params);	
					
		}
		gpew_membership_process_young_green($contact_result['id'], $form->_params['JointMemberDateOfBirth']);
		$membership_params=array('id'=>$form_params['membershipID'], 'version'=>3);
		
		//need to update membership to inherit jointness
		$mem_result=civicrm_api("Membership","getsingle", $membership_params);
		$mem_result['version']=3;
		$mem_result=civicrm_api("Membership","update", $mem_result);		
	}	
}


function gpew_membership_process_young_green($contact_id, $date_of_birth){
	//need to handle blank DOB or CID
	if($date_of_birth=='' OR $contact_id==''){
		return;
	}
	$dob = new DateTime($date_of_birth);
	$dob_ts = $dob->getTimestamp();
	$now = new DateTime();
	$now_ts = $now->getTimestamp();
	$age=($now_ts-$dob_ts)/(60*60*24*365.25);
	if ($age > 30){
		return;
	}
	$params[1] = array( $contact_id, 'Integer');
	$query="SELECT *
	FROM civicrm_group_contact
	WHERE group_id =30
	AND contact_id =%1";
	$result = CRM_Core_DAO::executeQuery( $query, $params );
	$result->fetch();
	if ($result->N ==0){//add to young greens group 
		$params = array ('version' =>'3',
						'contact_id' => $contact_id,
						'group_id' => '30'//Young greens group
						);
		$results=civicrm_api("GroupContact","create", $params);	
	}
} 



function gp_membership_form_redirect() {
	civicrm_initialize();
	CRM_Utils_System::redirect("/civicrm/contribute/transact?reset=1&id=6");
}



?>