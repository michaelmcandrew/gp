<?php

// /*
//  * Copyright (C) 2011 Peter McAndrew
//  * Licensed to CiviCRM under the Academic Free License version 3.0.
//  *
//  */
// //provide redirect for membership contribution page
// 
// $multiple_membership = NULL;
// 
// //Build form hook to add fields to joint contibutution pages
// 
// function gpew_renew_civicrm_buildForm( $formName, &$form ){
// 	
// 	if(!($formName == 'CRM_Contribute_Form_Contribution_Main' && $form->_id == 6)){
// 		return;
// 	}
// 
// 	//If a relationship exists get information and populate fields about joint member, 
// 	// contact_id_b=cid
// 	//relationship_type_id=22 for gives membership to
// 	// If a relationship doesn't exist create new contact and add membership relationship
// 	
// 	$params[1] = array( 4, 'Integer');
// 	$query="SELECT
// 		cc.id,
// 		cc.first_name,
// 		cc.last_name,
// 		ce.email,
// 		cp.phone
// 	FROM civicrm_contact AS cc
// 	JOIN civicrm_relationship AS cr ON cc.id = cr.contact_id_a
// 	LEFT JOIN civicrm_email AS ce ON cc.id=ce.contact_id AND ce.is_primary
// 	LEFT JOIN civicrm_phone AS cp ON cc.id=cp.contact_id AND cp.is_primary
// 	WHERE
// 		cr.contact_id_b = %1 AND
// 		cr.relationship_type_id = 22 AND
// 		cr.is_active = 1 AND
// 		cc.is_deleted = 0";
// 		
// 	$result = CRM_Core_DAO::executeQuery( $query, $params );	
// 	$result->fetch();
// 	print_r($result);exit;
// 	
// 	// $form->addElement('text', 'JointMemberFirstName', ts('First name'))->setValue($result->first_name);
// 	// $form->addElement('text', 'JointMemberLastName', ts('Last name'))->setValue($result->last_name);
// 	
// 
// 	if ($results['count']==1){
// 		//get contact a first name and last name and populate form
// 	}
// 	else {
// 		
// 	}
// 	
// }
// 
// function gp_renew_civicrm_postProcess( $formName, &$form ){
// 	if(!($formName == 'CRM_Contribute_Form_Contribution_Main' && $form->_id == 7)){
// 		return;
// 	}
// 	
// 	//validate fields,  display fields on confirmation page (CRM/Contribute/Form/Contribution/Confirm.tpl) when confirmation page is submitted create relationship that gives membership to joint member (if )
// 	//
// }
// 

function gpew_membership_menu() {
	$items['renew'] = array(
		'title' => 'Membership renewal',
		'page callback' => 'gpew_renew_page',
		'access callback' => TRUE,
		'menu_name' => 'menu-tertiary-links',
	);
	$items['membership/form'] = array(
	    'title' => "Membership sign-up | Green Party members' website",
	    'page callback' => 'gp_membership_form_redirect',
		'access callback' => TRUE,
	    'type' => MENU_CALLBACK,
	);
	return $items;
}


function gpew_membership_civicrm_buildForm($formName, &$form) {
	if(!($formName == 'CRM_Contribute_Form_Contribution_Main' && $form->_id == 6)){
		return;
	}

//	Get the current contact id and look up any related (gives membership to [id=22]) contacts.
	$civiId = getCiviId();
	$params[1] = array( $civiId, 'Integer');
	$query="SELECT
		cc.id,
		cc.first_name,
		cc.middle_name,
		cc.last_name,
		cc.birth_date,
		ce.email,
		cp.phone
	FROM civicrm_contact AS cc
	JOIN civicrm_relationship AS cr ON cc.id = cr.contact_id_a
	LEFT JOIN civicrm_email AS ce ON cc.id=ce.contact_id AND ce.is_primary
	LEFT JOIN civicrm_phone AS cp ON cc.id=cp.contact_id AND cp.is_primary
	WHERE
		cr.contact_id_b = %1 AND
		cr.relationship_type_id = 22 AND
		cr.is_active = 1 AND
		cc.is_deleted = 0";
		
	$result = CRM_Core_DAO::executeQuery( $query, $params );	
	$result->fetch();
	//print_r($result->N);exit;
	
	
	if ($result->N==1){// If there is exactly one id=22 relationship do the following
		
		//convert date into right format
		$originalDate = $result->birth_date;
		$newDate = date("m/d/Y", strtotime($originalDate));
	
		$form->addElement('text', 'JointMemberFirstName', ts('First Name'), array('value'=>$result->first_name) );
		$form->addElement('text', 'JointMemberMiddleName', ts('Middle Name'), array('value'=>$result->middle_name) );
		$form->addElement('text', 'JointMemberLastName', ts('Last Name'), array('value'=>$result->last_name) );
		$form->addElement('text',"JointMemberEmailAddress", ts('Email'), array('value'=>$result->email), CRM_Core_DAO::getAttribute('CRM_Core_DAO_Email', 'email') );
		$form->addRule( "JointMemberEmailAddress", ts('Email is not valid.'), 'email' );
		$form->addElement('text', 'JointMemberMobile', ts('Mobile'), array('value'=>$result->phone) );
		$form->addDate('JointMemberDateOfBirth', ts('Date of birth'), false, array( 'value'=>$newDate, 'formatType' => 'birth') );

	}
	else {//otherwise the user has no relationships or more than one 
	// We don't want to let the user continue here so we need to display a message
	}


}





// function gpew_renew_theme() {
// 	return array(
// 			'gpew_renew_page' => array(
// 									'template' => 'gpew-renew-page',
// 									'arguments' => array('membership' => NULL,
// 									 					'relationship' => NULL, 
// 														'renew_link' => NULL,
// 														'is_primary' => NULL,
// 														'more_info' => NULL
// 														),
// 									)		
//   				);
// }

// function gpew_renew_page()
// {
// 	 // get membership information from civicrm (membership type, expiry date, status, for joint members whether or not they are the primary member).  If they have neither, direct them to the join page and / or tell them they should contact the office if they think this is an error.
// 
// 	$membership = get_membership();
// 	$relationship = get_relationship();
// 	$renew_link = renew_link();
// 	$is_primary = is_primary();
// 	$more_info = "<a href='membership-info'>More information about membership types</a>";
// 	//	$isJoint = is_joint();
// 
// 
// 	//íf there are multiple memberships
// 		if ($GLOBALS['multiple_membership'])
// 	{	
// 		return "We're having trouble retrieving your membershup information, please contact the Green Party office.</br>".$more_info; 
// 	}
// 	//íf there is no membership
// 		if (!$membership)
// 	{	
// 		return "You have no membership on record, please <a href='nfp'>click here to join</a>.  </br>If you think this is an error please contact the Green Party office</br>".$more_info; 
// 	}
// 
// 
// 	return theme('gpew_renew_page', $membership, $relationship, $renew_link, $is_primary, $more_info);
// }


function gp_membership_form_redirect() {
	civicrm_initialize();
	CRM_Utils_System::redirect("/civicrm/contribute/transact?reset=1&id=6");
}


function getCiviId()
{
	civicrm_initialize();
	$params = array ('version' =>'3',
					'uf_id' => getDrupalId(),
					'return' => 'contact_id' );
	$results=civicrm_api("UFMatch","getvalue",$params );
	return $results;
	//return "20206";
}
function getDrupalId()
{
	global $user;
	return $user->uid;
}

// function get_relationship()
// {
// 	civicrm_initialize();
// 	$params = array( 
// 		'contact_id' => getCiviId(),
// 		'return' => 'relation',
// 		'version' => 3,
// 	);
// 	$results=civicrm_api("Relationship","getvalue", $params);
// 	//print_r($results);exit;
// 	return $results;
// }
// function is_joint()
// {
// 	$membership = get_membership();
// 	$membership_name = $membership['membership_name'];	
// 	if (strpos($membership_name,"Joint")!== false) 
// 		{
// 		return '7';
// 		}
// 	else {
// 		return '6';
// 		}
// }
// function is_primary()
// {
// 	if (get_relationship()=='0')
// 	{
// 		return FALSE;
// 	}
// 	else 
// 	{
// 		return TRUE;
// 	}
// }
// 
// function renew_link()
// {
// 	$link = 'http://gp.local/civicrm/contribute/transact?reset=1&id='.is_joint();
// 	return $link;
// }
// 	
// 
// // create renew button that links to correct contibution page, or says, 'you are not the primary member. only the primary member [member name] can renew')
?>